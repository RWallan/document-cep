{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"C\u00e1lculo de dist\u00e2ncia entre duas geolocaliza\u00e7\u00f5es O projeto foi feito para calcular a dist\u00e2ncia entre duas geolocaliza\u00e7\u00f5es. As etapas s\u00e3o constru\u00eddas desde a limpeza e formata\u00e7\u00e3o de CEPs, utiliza\u00e7\u00e3o da API Google para buscar as geolocaliza\u00e7\u00f5es dos CEPs e o c\u00e1lculo da dist\u00e2ncia entre as geolocaliza\u00e7\u00f5es obtidas. Estrutura do projeto mkdocs.yml # Configura\u00e7\u00e3o do mkdocs. requirements.txt # Bibliotecas python necess\u00e1rias. Makefile # Arquivo make com comandos \u00fateis. .gitignore # Configura\u00e7\u00e3o git. README.md # Descri\u00e7\u00e3o do projeto. docs/ index.md # Documenta\u00e7\u00e3o da estrutura do projeto. 01_cep_cleaning.md # Documenta\u00e7\u00e3o do script de limpeza de CEP. 02_geo_search.md # Documenta\u00e7\u00e3o do script de busca das geolocaliza\u00e7\u00f5es. 03_distance_calculate.md # Documenta\u00e7\u00e3o do script para c\u00e1lculo das dist\u00e2ncias. funs_cep.md # Documenta\u00e7\u00e3o do script com fun\u00e7\u00f5es \u00fateis. config/ faixacep.txt # Cont\u00e9m as faixas de CEPs e sua respectiva localidade. Constru\u00eddo a partir dos sites do correios. key_google.txt # Chave de acesso para a API do google. Solicitar ao autor. data_cep/ # Diret\u00f3rio com os **data frames** necess\u00e1rios para a execu\u00e7\u00e3o do projeto. Solicitar ao autor. sample/ 01_cep_cleaning.py # Limpeza de CEP. 02_geo_search.py # Busca de geolocaliza\u00e7\u00f5es. 03_distance_calculate.py # C\u00e1lculo de dist\u00e2ncias. funs_cep.py # Fun\u00e7\u00f5es \u00fateis. Para o projeto Para poder atender aos requisitos necess\u00e1rios do projeto, escolha um dos t\u00f3picos a seguir que encaixe com as suas ferramentas: Execute o arquivo Makefile com o GNU Make . Nele ser\u00e1 criado um ambiente virtual e instalar\u00e1 todos os pacotes necess\u00e1rios do projeto. \u00c9 necess\u00e1rio ter o virtualenv instalado. Para executar via GNU Make : make install Caso n\u00e3o tenha o GNU Make. \u00c9 aconselh\u00e1vel criar um ambiente virtual a partir da sua ferramente de escolha e execute o requirements.txt atrav\u00e9s do PIP. Algumas ferramentas para a cria\u00e7\u00e3o de ambientes virtuais: virtualenv venv poetry anaconda Para executar via PIP: pip install -r requirements.txt Links \u00fateis Site de consulta de faixas de CEPs: https://buscacepinter.correios.com.br/app/faixa_cep_uf_localidade/index.php GNU Make: https://www.gnu.org/software/make/ Anaconda: https://www.anaconda.com","title":"C\u00e1lculo de dist\u00e2ncia entre duas geolocaliza\u00e7\u00f5es"},{"location":"#calculo-de-distancia-entre-duas-geolocalizacoes","text":"O projeto foi feito para calcular a dist\u00e2ncia entre duas geolocaliza\u00e7\u00f5es. As etapas s\u00e3o constru\u00eddas desde a limpeza e formata\u00e7\u00e3o de CEPs, utiliza\u00e7\u00e3o da API Google para buscar as geolocaliza\u00e7\u00f5es dos CEPs e o c\u00e1lculo da dist\u00e2ncia entre as geolocaliza\u00e7\u00f5es obtidas.","title":"C\u00e1lculo de dist\u00e2ncia entre duas geolocaliza\u00e7\u00f5es"},{"location":"#estrutura-do-projeto","text":"mkdocs.yml # Configura\u00e7\u00e3o do mkdocs. requirements.txt # Bibliotecas python necess\u00e1rias. Makefile # Arquivo make com comandos \u00fateis. .gitignore # Configura\u00e7\u00e3o git. README.md # Descri\u00e7\u00e3o do projeto. docs/ index.md # Documenta\u00e7\u00e3o da estrutura do projeto. 01_cep_cleaning.md # Documenta\u00e7\u00e3o do script de limpeza de CEP. 02_geo_search.md # Documenta\u00e7\u00e3o do script de busca das geolocaliza\u00e7\u00f5es. 03_distance_calculate.md # Documenta\u00e7\u00e3o do script para c\u00e1lculo das dist\u00e2ncias. funs_cep.md # Documenta\u00e7\u00e3o do script com fun\u00e7\u00f5es \u00fateis. config/ faixacep.txt # Cont\u00e9m as faixas de CEPs e sua respectiva localidade. Constru\u00eddo a partir dos sites do correios. key_google.txt # Chave de acesso para a API do google. Solicitar ao autor. data_cep/ # Diret\u00f3rio com os **data frames** necess\u00e1rios para a execu\u00e7\u00e3o do projeto. Solicitar ao autor. sample/ 01_cep_cleaning.py # Limpeza de CEP. 02_geo_search.py # Busca de geolocaliza\u00e7\u00f5es. 03_distance_calculate.py # C\u00e1lculo de dist\u00e2ncias. funs_cep.py # Fun\u00e7\u00f5es \u00fateis.","title":"Estrutura do projeto"},{"location":"#para-o-projeto","text":"Para poder atender aos requisitos necess\u00e1rios do projeto, escolha um dos t\u00f3picos a seguir que encaixe com as suas ferramentas: Execute o arquivo Makefile com o GNU Make . Nele ser\u00e1 criado um ambiente virtual e instalar\u00e1 todos os pacotes necess\u00e1rios do projeto. \u00c9 necess\u00e1rio ter o virtualenv instalado. Para executar via GNU Make : make install Caso n\u00e3o tenha o GNU Make. \u00c9 aconselh\u00e1vel criar um ambiente virtual a partir da sua ferramente de escolha e execute o requirements.txt atrav\u00e9s do PIP. Algumas ferramentas para a cria\u00e7\u00e3o de ambientes virtuais: virtualenv venv poetry anaconda Para executar via PIP: pip install -r requirements.txt","title":"Para o projeto"},{"location":"#links-uteis","text":"Site de consulta de faixas de CEPs: https://buscacepinter.correios.com.br/app/faixa_cep_uf_localidade/index.php GNU Make: https://www.gnu.org/software/make/ Anaconda: https://www.anaconda.com","title":"Links \u00fateis"},{"location":"01_cep_cleaning/","text":"Script - Limpeza e formata\u00e7\u00e3o de CEPs O script tem como objetivo limpar e formatar os CEPs para um padr\u00e3o. O padr\u00e3o adotado \u00e9 para que o script de busca de geolocaliza\u00e7\u00f5es possa ser o mais preciso poss\u00edvel. A seguir ser\u00e1 descrito as se\u00e7\u00f5es presentes no script: Importando dados Importa os dados com as informa\u00e7\u00f5es de CEP a serem formatados. Aplicando tratamento nos dados de CEP Aplica a classe: FaixaCep , e as fun\u00e7\u00f5es: limpar_cep() , formatar_cep() . Para mais informa\u00e7\u00f5es, clique aqui . Dicion\u00e1rio de faixas de CEP Transforma o arquivo faixacep.txt em um dicion\u00e1rio para ser consultado. dict_cep = eval ( open ( \"../config/faixacep.txt\" , \"r\" ) . read ()) faixacep = FaixaCep ( dict_cep ) Tratamento Limpa as strings de CEP, removendo qualquer caracter que n\u00e3o seja n\u00famero e sinaliza como None os CEPs inv\u00e1lidos. df [ \"cepaluno\" ] = df [ \"cepaluno\" ] . astype ( \"str\" ) df [ \"cepaluno_limpo\" ] = df [ \"cepaluno\" ] . apply ( limpar_cep ) df [ \"cepunidade_limpo\" ] = df [ \"cepunidade\" ] . apply ( limpar_cep ) O arquivo \u00e9 filtrado para somente aqueles que cont\u00e9m CEP. df_notnull = df . dropna ( inplace = False ) df_notnull [[ \"cepaluno_limpo\" , \"cepunidade_limpo\" ]] = df_notnull [ [ \"cepaluno_limpo\" , \"cepunidade_limpo\" ] ] . astype ( \"int\" ) O processo \u00e9 repetido para os alunos e para a unidade de estudo. Formata\u00e7\u00e3o Constr\u00f3i a formata\u00e7\u00e3o a ser utilizada para a busca de geolocaliza\u00e7\u00e3o tanto para os alunos quanto para as unidades de estudo. Exportando CEPs limpos Exportando dados limpos para data_cep/ Para mais informa\u00e7\u00f5es Para mais informa\u00e7\u00f5es, consulte o texto Fun\u00e7\u00f5es \u00fateis .","title":"Script - Limpeza e formata\u00e7\u00e3o de CEPs"},{"location":"01_cep_cleaning/#script-limpeza-e-formatacao-de-ceps","text":"O script tem como objetivo limpar e formatar os CEPs para um padr\u00e3o. O padr\u00e3o adotado \u00e9 para que o script de busca de geolocaliza\u00e7\u00f5es possa ser o mais preciso poss\u00edvel. A seguir ser\u00e1 descrito as se\u00e7\u00f5es presentes no script:","title":"Script - Limpeza e formata\u00e7\u00e3o de CEPs"},{"location":"01_cep_cleaning/#importando-dados","text":"Importa os dados com as informa\u00e7\u00f5es de CEP a serem formatados.","title":"Importando dados"},{"location":"01_cep_cleaning/#aplicando-tratamento-nos-dados-de-cep","text":"Aplica a classe: FaixaCep , e as fun\u00e7\u00f5es: limpar_cep() , formatar_cep() . Para mais informa\u00e7\u00f5es, clique aqui .","title":"Aplicando tratamento nos dados de CEP"},{"location":"01_cep_cleaning/#dicionario-de-faixas-de-cep","text":"Transforma o arquivo faixacep.txt em um dicion\u00e1rio para ser consultado. dict_cep = eval ( open ( \"../config/faixacep.txt\" , \"r\" ) . read ()) faixacep = FaixaCep ( dict_cep )","title":"Dicion\u00e1rio de faixas de CEP"},{"location":"01_cep_cleaning/#tratamento","text":"Limpa as strings de CEP, removendo qualquer caracter que n\u00e3o seja n\u00famero e sinaliza como None os CEPs inv\u00e1lidos. df [ \"cepaluno\" ] = df [ \"cepaluno\" ] . astype ( \"str\" ) df [ \"cepaluno_limpo\" ] = df [ \"cepaluno\" ] . apply ( limpar_cep ) df [ \"cepunidade_limpo\" ] = df [ \"cepunidade\" ] . apply ( limpar_cep ) O arquivo \u00e9 filtrado para somente aqueles que cont\u00e9m CEP. df_notnull = df . dropna ( inplace = False ) df_notnull [[ \"cepaluno_limpo\" , \"cepunidade_limpo\" ]] = df_notnull [ [ \"cepaluno_limpo\" , \"cepunidade_limpo\" ] ] . astype ( \"int\" ) O processo \u00e9 repetido para os alunos e para a unidade de estudo.","title":"Tratamento"},{"location":"01_cep_cleaning/#formatacao","text":"Constr\u00f3i a formata\u00e7\u00e3o a ser utilizada para a busca de geolocaliza\u00e7\u00e3o tanto para os alunos quanto para as unidades de estudo.","title":"Formata\u00e7\u00e3o"},{"location":"01_cep_cleaning/#exportando-ceps-limpos","text":"Exportando dados limpos para data_cep/","title":"Exportando CEPs limpos"},{"location":"01_cep_cleaning/#para-mais-informacoes","text":"Para mais informa\u00e7\u00f5es, consulte o texto Fun\u00e7\u00f5es \u00fateis .","title":"Para mais informa\u00e7\u00f5es"},{"location":"02_geo_seach/","text":"Script - Busca de geolocaliza\u00e7\u00e3o O script tem como objetivo buscar a geolocaliza\u00e7\u00e3o dos dados de Estado - CEP. A seguir est\u00e1 descrito as se\u00e7\u00f5es presentes no script. Importando dados limpos Import os dados limpos obtidos do script de limpeza de CEPs . Criando array apenas com CEPs distintos Cria uma lista de CEPs \u00fanicos tanto de alunos quanto das unidades. Buscando geolocaliza\u00e7\u00e3o Primeiramente faz uma verifica\u00e7\u00e3o para encontrar a base geocode.csv existente de geolocaliza\u00e7\u00f5es para CEPs conhecidos. if os . path . isfile ( PATH ): df_verify = pd . read_csv ( PATH ) else : df_verify = pd . DataFrame ( columns = column_name ) Faz um filtro para executar a API para os CEPs que n\u00e3o constam na base de dados. Caso n\u00e3o haja esse arquivo, \u00e9 criado uma lista vazia e \u00e9 feito a busca para todos os CEPs. cep_distinct = [ cep for cep in cep_distinct if cep not in df_verify [ \"cep\" ] . values ] Feito a lista de CEPs definitiva, uma l\u00f3gica de lotes \u00e9 executada. A API \u00e9 executada em uma sequ\u00eancia de 100 CEPs. E ap\u00f3s finalizado a sequ\u00eancia \u00e9 salvo no arquivo geocode.csv as informa\u00e7\u00f5es coletadas. Esse passo \u00e9 executado at\u00e9 percorrer a lista de todos os CEPs. BUFFER_SIZE = 100 for i in range ( 0 , n_distinct , BUFFER_SIZE ): start_at = i end_at = min ( start_at + BUFFER_SIZE , n_distinct ) temp = [] print ( f \"Buscando CEPs { start_at } - { end_at } \" ) for cep in cep_distinct [ start_at : end_at ]: geocode = geo . locate_geocode ( cep ) temp . append ([ cep , geocode ]) df_geocode = pd . DataFrame ( temp , columns = column_name ) if not os . path . isfile ( PATH ): df_geocode . to_csv ( PATH , index = False ) else : df_geocode . to_csv ( PATH , mode = \"a\" , header = False , index = False ) Para mais informa\u00e7\u00f5es Para mais informa\u00e7\u00f5es, consulte o texto Fun\u00e7\u00f5es \u00fateis .","title":"Script - Busca de geolocaliza\u00e7\u00e3o"},{"location":"02_geo_seach/#script-busca-de-geolocalizacao","text":"O script tem como objetivo buscar a geolocaliza\u00e7\u00e3o dos dados de Estado - CEP. A seguir est\u00e1 descrito as se\u00e7\u00f5es presentes no script.","title":"Script - Busca de geolocaliza\u00e7\u00e3o"},{"location":"02_geo_seach/#importando-dados-limpos","text":"Import os dados limpos obtidos do script de limpeza de CEPs .","title":"Importando dados limpos"},{"location":"02_geo_seach/#criando-array-apenas-com-ceps-distintos","text":"Cria uma lista de CEPs \u00fanicos tanto de alunos quanto das unidades.","title":"Criando array apenas com CEPs distintos"},{"location":"02_geo_seach/#buscando-geolocalizacao","text":"Primeiramente faz uma verifica\u00e7\u00e3o para encontrar a base geocode.csv existente de geolocaliza\u00e7\u00f5es para CEPs conhecidos. if os . path . isfile ( PATH ): df_verify = pd . read_csv ( PATH ) else : df_verify = pd . DataFrame ( columns = column_name ) Faz um filtro para executar a API para os CEPs que n\u00e3o constam na base de dados. Caso n\u00e3o haja esse arquivo, \u00e9 criado uma lista vazia e \u00e9 feito a busca para todos os CEPs. cep_distinct = [ cep for cep in cep_distinct if cep not in df_verify [ \"cep\" ] . values ] Feito a lista de CEPs definitiva, uma l\u00f3gica de lotes \u00e9 executada. A API \u00e9 executada em uma sequ\u00eancia de 100 CEPs. E ap\u00f3s finalizado a sequ\u00eancia \u00e9 salvo no arquivo geocode.csv as informa\u00e7\u00f5es coletadas. Esse passo \u00e9 executado at\u00e9 percorrer a lista de todos os CEPs. BUFFER_SIZE = 100 for i in range ( 0 , n_distinct , BUFFER_SIZE ): start_at = i end_at = min ( start_at + BUFFER_SIZE , n_distinct ) temp = [] print ( f \"Buscando CEPs { start_at } - { end_at } \" ) for cep in cep_distinct [ start_at : end_at ]: geocode = geo . locate_geocode ( cep ) temp . append ([ cep , geocode ]) df_geocode = pd . DataFrame ( temp , columns = column_name ) if not os . path . isfile ( PATH ): df_geocode . to_csv ( PATH , index = False ) else : df_geocode . to_csv ( PATH , mode = \"a\" , header = False , index = False )","title":"Buscando geolocaliza\u00e7\u00e3o"},{"location":"02_geo_seach/#para-mais-informacoes","text":"Para mais informa\u00e7\u00f5es, consulte o texto Fun\u00e7\u00f5es \u00fateis .","title":"Para mais informa\u00e7\u00f5es"},{"location":"03_distance_calculate/","text":"Script - Calcular dist\u00e2ncia das geolocaliza\u00e7\u00f5es O script tem como objetivo executar o c\u00e1lculo de dist\u00e2ncia entre duas geolocaliza\u00e7\u00f5es. A seguir ser\u00e1 descrito as se\u00e7\u00f5es presentes no script: Importando dados Importa os dados contendo as informa\u00e7\u00f5es das geolocaliza\u00e7\u00f5es e os dados contendo os CEPs dos alunos e unidades. Dando merge com os CEPs conhecidos A partir dos dados contendo as geolocaliza\u00e7\u00f5es e os CEPs \u00fanicos, \u00e9 dado um merge com os CEPs de alunos. df_aluno_geocode = df_notnull [[ \"DR_CD_MATRICULA\" , \"cepaluno_f\" ]] . merge ( df_unique_geocode , left_on = \"cepaluno_f\" , right_on = \"cep\" ) O mesmo \u00e9 feito para os CEP de unidade: df_unidade_geocode = df_notnull [[ \"DR_CD_MATRICULA\" , \"cepunidade_f\" ]] . merge ( df_unique_geocode , left_on = \"cepunidade_f\" , right_on = \"cep\" ) Contendo um banco de dados com as geolocaliza\u00e7\u00f5es dos alunos e outro com as das unidades, \u00e9 feito um merge com os dois bancos. df_merged = df_aluno_geocode . merge ( df_unidade_geocode , left_on = \"DR_CD_MATRICULA\" , right_on = \"DR_CD_MATRICULA\" , how = \"inner\" , ) df_merged = df_merged . merge ( df_notnull [[ \"DR\" , \"DR_CD_MATRICULA\" ]], left_on = \"DR_CD_MATRICULA\" , right_on = \"DR_CD_MATRICULA\" , ) C\u00e1lculo de dist\u00e2ncia Se\u00e7\u00e3o destinada para calcular a dist\u00e2ncia entre as geolocaliza\u00e7\u00f5es Filtrando para geolocaliza\u00e7\u00f5es existentes Remove as linhas que n\u00e3o cont\u00e9m informa\u00e7\u00e3o da geolocaliza\u00e7\u00e3o do aluno ou da unidade. Dist\u00e2ncia \u00c9 feito o c\u00e1lculo da dist\u00e2ncia para a m\u00e9trica de Haversine e para o GeoDesic. Feito os c\u00e1lculos, um novo data frame \u00e9 salvo com as informa\u00e7\u00f5es: df_distance_full.csv - Possui todas as colunas existentes; df_distance.csv - Possui as colunas de DR_CD_MATRICULA, distance_hav e distance_dg. Para mais informa\u00e7\u00f5es Para mais informa\u00e7\u00f5es, consulte o texto Fun\u00e7\u00f5es \u00fateis .","title":"Script - Calcular dist\u00e2ncia das geolocaliza\u00e7\u00f5es"},{"location":"03_distance_calculate/#script-calcular-distancia-das-geolocalizacoes","text":"O script tem como objetivo executar o c\u00e1lculo de dist\u00e2ncia entre duas geolocaliza\u00e7\u00f5es. A seguir ser\u00e1 descrito as se\u00e7\u00f5es presentes no script:","title":"Script - Calcular dist\u00e2ncia das geolocaliza\u00e7\u00f5es"},{"location":"03_distance_calculate/#importando-dados","text":"Importa os dados contendo as informa\u00e7\u00f5es das geolocaliza\u00e7\u00f5es e os dados contendo os CEPs dos alunos e unidades.","title":"Importando dados"},{"location":"03_distance_calculate/#dando-merge-com-os-ceps-conhecidos","text":"A partir dos dados contendo as geolocaliza\u00e7\u00f5es e os CEPs \u00fanicos, \u00e9 dado um merge com os CEPs de alunos. df_aluno_geocode = df_notnull [[ \"DR_CD_MATRICULA\" , \"cepaluno_f\" ]] . merge ( df_unique_geocode , left_on = \"cepaluno_f\" , right_on = \"cep\" ) O mesmo \u00e9 feito para os CEP de unidade: df_unidade_geocode = df_notnull [[ \"DR_CD_MATRICULA\" , \"cepunidade_f\" ]] . merge ( df_unique_geocode , left_on = \"cepunidade_f\" , right_on = \"cep\" ) Contendo um banco de dados com as geolocaliza\u00e7\u00f5es dos alunos e outro com as das unidades, \u00e9 feito um merge com os dois bancos. df_merged = df_aluno_geocode . merge ( df_unidade_geocode , left_on = \"DR_CD_MATRICULA\" , right_on = \"DR_CD_MATRICULA\" , how = \"inner\" , ) df_merged = df_merged . merge ( df_notnull [[ \"DR\" , \"DR_CD_MATRICULA\" ]], left_on = \"DR_CD_MATRICULA\" , right_on = \"DR_CD_MATRICULA\" , )","title":"Dando merge com os CEPs conhecidos"},{"location":"03_distance_calculate/#calculo-de-distancia","text":"Se\u00e7\u00e3o destinada para calcular a dist\u00e2ncia entre as geolocaliza\u00e7\u00f5es","title":"C\u00e1lculo de dist\u00e2ncia"},{"location":"03_distance_calculate/#filtrando-para-geolocalizacoes-existentes","text":"Remove as linhas que n\u00e3o cont\u00e9m informa\u00e7\u00e3o da geolocaliza\u00e7\u00e3o do aluno ou da unidade.","title":"Filtrando para geolocaliza\u00e7\u00f5es existentes"},{"location":"03_distance_calculate/#distancia","text":"\u00c9 feito o c\u00e1lculo da dist\u00e2ncia para a m\u00e9trica de Haversine e para o GeoDesic. Feito os c\u00e1lculos, um novo data frame \u00e9 salvo com as informa\u00e7\u00f5es: df_distance_full.csv - Possui todas as colunas existentes; df_distance.csv - Possui as colunas de DR_CD_MATRICULA, distance_hav e distance_dg.","title":"Dist\u00e2ncia"},{"location":"03_distance_calculate/#para-mais-informacoes","text":"Para mais informa\u00e7\u00f5es, consulte o texto Fun\u00e7\u00f5es \u00fateis .","title":"Para mais informa\u00e7\u00f5es"},{"location":"funs_cep/","text":"Script - Fun\u00e7\u00f5es \u00fateis FaixaCep Bases: dict Consulta de faixas de CEP de acordo com a sua localidade. Parameters: Name Type Description Default dict dict Objeto contendo o dicion\u00e1rio com as faixas de CEP e sua localidade correspondente. O dict deve ser no formato: {range(start,end): \"localidade\"} required Source code in sample/funs_cep.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 class FaixaCep ( dict ): \"\"\"Consulta de faixas de CEP de acordo com a sua localidade. Args: dict (dict): Objeto contendo o dicion\u00e1rio com as faixas de CEP e sua localidade correspondente. O dict deve ser no formato: {range(start,end): \"localidade\"} \"\"\" def __getitem__ ( self , item : int ) -> str : \"\"\"Busca localidade a partir de uma consulta em faixas de valores. Args: item (int): CEP a ser consultado. Returns: str: Localidade correspondete ao CEP inserido. \"\"\" if not isinstance ( item , range ): for key in self : if item in key : return self [ key ] return None else : return super () . __getitem__ ( item ) __getitem__ ( item ) Busca localidade a partir de uma consulta em faixas de valores. Parameters: Name Type Description Default item int CEP a ser consultado. required Returns: Name Type Description str str Localidade correspondete ao CEP inserido. Source code in sample/funs_cep.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 def __getitem__ ( self , item : int ) -> str : \"\"\"Busca localidade a partir de uma consulta em faixas de valores. Args: item (int): CEP a ser consultado. Returns: str: Localidade correspondete ao CEP inserido. \"\"\" if not isinstance ( item , range ): for key in self : if item in key : return self [ key ] return None else : return super () . __getitem__ ( item ) GeoCode Acessa a API do GoogleMaps para recuperar informa\u00e7\u00f5es de latitude e longitude. Source code in sample/funs_cep.py 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 class GeoCode : \"\"\"Acessa a API do GoogleMaps para recuperar informa\u00e7\u00f5es de latitude e longitude.\"\"\" def __init__ ( self , path = \"../config/key_google.txt\" ): \"\"\"Utiliza a client key no arquivo key_google.txt para estabelecer conex\u00e3o com a API. Args: path (str): Diret\u00f3rio e nome do arquivo que est\u00e1 a key para a API google. \"\"\" f = open ( path , \"r\" ) f = f . read () self . key = eval ( f ) self . gmaps_key = googlemaps . Client ( key = self . key ) def locate_geocode ( self , cep : str ) -> tuple : \"\"\"Consulta a latitude e longitude do CEP informado. Args: cep (str): CEP formatado, por exemplo: Distrito Federal - XXXXX-XXX. A fun\u00e7\u00e3o formatar_cep() formata o CEP da forma correta a ser utilizado. Returns: tuple: Latitude e Longitude a partir do CEP. \"\"\" print ( f \"Buscando geolocaliza\u00e7\u00e3o para { cep } \" ) g = self . gmaps_key . geocode ( cep ) try : self . lat = g [ 0 ][ \"geometry\" ][ \"location\" ][ \"lat\" ] self . lon = g [ 0 ][ \"geometry\" ][ \"location\" ][ \"lng\" ] return self . lat , self . lon except : return None __init__ ( path = '../config/key_google.txt' ) Utiliza a client key no arquivo key_google.txt para estabelecer conex\u00e3o com a API. Parameters: Name Type Description Default path str Diret\u00f3rio e nome do arquivo que est\u00e1 a key para a API google. '../config/key_google.txt' Source code in sample/funs_cep.py 93 94 95 96 97 98 99 100 101 102 def __init__ ( self , path = \"../config/key_google.txt\" ): \"\"\"Utiliza a client key no arquivo key_google.txt para estabelecer conex\u00e3o com a API. Args: path (str): Diret\u00f3rio e nome do arquivo que est\u00e1 a key para a API google. \"\"\" f = open ( path , \"r\" ) f = f . read () self . key = eval ( f ) self . gmaps_key = googlemaps . Client ( key = self . key ) locate_geocode ( cep ) Consulta a latitude e longitude do CEP informado. Parameters: Name Type Description Default cep str CEP formatado, por exemplo: Distrito Federal - XXXXX-XXX. A fun\u00e7\u00e3o formatar_cep() formata o CEP da forma correta a ser utilizado. required Returns: Name Type Description tuple tuple Latitude e Longitude a partir do CEP. Source code in sample/funs_cep.py 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 def locate_geocode ( self , cep : str ) -> tuple : \"\"\"Consulta a latitude e longitude do CEP informado. Args: cep (str): CEP formatado, por exemplo: Distrito Federal - XXXXX-XXX. A fun\u00e7\u00e3o formatar_cep() formata o CEP da forma correta a ser utilizado. Returns: tuple: Latitude e Longitude a partir do CEP. \"\"\" print ( f \"Buscando geolocaliza\u00e7\u00e3o para { cep } \" ) g = self . gmaps_key . geocode ( cep ) try : self . lat = g [ 0 ][ \"geometry\" ][ \"location\" ][ \"lat\" ] self . lon = g [ 0 ][ \"geometry\" ][ \"location\" ][ \"lng\" ] return self . lat , self . lon except : return None calcular_distancia ( origin , destination , metric = 'hav' ) C\u00e1lculo de dist\u00e2ncia entre dois pontos a partir das suas geolocaliza\u00e7\u00f5es. Parameters: Name Type Description Default origin tuple Latitude e longitude da localiza\u00e7\u00e3o de origem. required destination tuple Latitude e longitude da localiza\u00e7\u00e3o de destino. required metric str , opcional M\u00e9trica a ser utilizada para o c\u00e1lculo da dist\u00e2ncia. As m\u00e9tricas dispon\u00edveis s\u00e3o: hav - Haversine e gd - GeoDesic. Padr\u00e3o \"hav\". 'hav' Raises: Type Description KeyError M\u00e9trica de c\u00e1lculo errado. As op\u00e7\u00f5es v\u00e1lidas s\u00e3o: hav - Haversine ou gd - GeoDesic Returns: Name Type Description float float Dist\u00e2ncia em KM. Source code in sample/funs_cep.py 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 def calcular_distancia ( origin : tuple , destination : tuple , metric : metrics = \"hav\" ) -> float : \"\"\"C\u00e1lculo de dist\u00e2ncia entre dois pontos a partir das suas geolocaliza\u00e7\u00f5es. Args: origin (tuple): Latitude e longitude da localiza\u00e7\u00e3o de origem. destination (tuple): Latitude e longitude da localiza\u00e7\u00e3o de destino. metric (str, opcional): M\u00e9trica a ser utilizada para o c\u00e1lculo da dist\u00e2ncia. As m\u00e9tricas dispon\u00edveis s\u00e3o: hav - Haversine e gd - GeoDesic. Padr\u00e3o \"hav\". Raises: KeyError: M\u00e9trica de c\u00e1lculo errado. As op\u00e7\u00f5es v\u00e1lidas s\u00e3o: hav - Haversine ou gd - GeoDesic Returns: float: Dist\u00e2ncia em KM. \"\"\" if metric == \"hav\" : distance = haversine ( origin , destination ) elif metric == \"gd\" : distance = GD ( origin , destination ) . km else : raise KeyError ( \"Metric incorrect!\" ) return distance formatar_cep ( cep , faixacep ) Formata\u00e7\u00e3o do CEP com a localidade. Concatena a informa\u00e7\u00e3o da localidade (UF) e o CEP. Parameters: Name Type Description Default cep str or int CEP. required faixacep FaixaCep Objeto FaixaCep contendo as faixas de CEP e sua localidade correspondente. required Returns: Name Type Description str str CEP formatado, exemplo: Distrito Federal - XXXXXXXX. Source code in sample/funs_cep.py 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 def formatar_cep ( cep , faixacep : FaixaCep ) -> str : \"\"\"Formata\u00e7\u00e3o do CEP com a localidade. Concatena a informa\u00e7\u00e3o da localidade (UF) e o CEP. Args: cep (str or int): CEP. faixacep (FaixaCep): Objeto FaixaCep contendo as faixas de CEP e sua localidade correspondente. Returns: str: CEP formatado, exemplo: Distrito Federal - XXXXXXXX. \"\"\" estado = faixacep [ cep ] cep_formatado = f \" { estado } - { str ( cep ) } \" return cep_formatado limpar_cep ( cep ) Limpa strings de CEP. Retira caracteres que n\u00e3o sejam n\u00fameros. Retira CEPs com tamanhos incorretos, com 1 d\u00edgito em toda a string e retira aqueles que iniciam em uma faixa inexistente. As faixas consultadas est\u00e3o no arquivo faixas_cep.txt. As remo\u00e7\u00f5es existentes s\u00e3o aquelas que iniciam com: remove_tuple = (\"789\", \"76\", \"75\") Parameters: Name Type Description Default cep str CEP required Returns: Name Type Description int int CEP em formato de int para que possa ser consultado no dicion\u00e1rio de faixas de CEP. Consultar documenta\u00e7\u00e3o de FaixaCep(). Source code in sample/funs_cep.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 def limpar_cep ( cep : str ) -> int : \"\"\"Limpa strings de CEP. Retira caracteres que n\u00e3o sejam n\u00fameros. Retira CEPs com tamanhos incorretos, com 1 d\u00edgito em toda a string e retira aqueles que iniciam em uma faixa inexistente. As faixas consultadas est\u00e3o no arquivo faixas_cep.txt. As remo\u00e7\u00f5es existentes s\u00e3o aquelas que iniciam com: remove_tuple = (\"789\", \"76\", \"75\") Args: cep (str): CEP Returns: int: CEP em formato de int para que possa ser consultado no dicion\u00e1rio de faixas de CEP. Consultar documenta\u00e7\u00e3o de FaixaCep(). \"\"\" remove_tuple = ( \"789\" , \"76\" , \"75\" ) cep = re . sub ( \"[^0-9]\" , \"\" , cep ) if len ( cep ) < 7 or len ( cep ) > 8 : cep = None elif cep . count ( cep [ 0 ]) == len ( cep ): cep = None elif cep . startswith ( remove_tuple ): cep = None elif cep . startswith ( \"76\" ): cep = None if cep : return int ( cep ) return cep","title":"Script - Fun\u00e7\u00f5es \u00fateis"},{"location":"funs_cep/#script-funcoes-uteis","text":"","title":"Script - Fun\u00e7\u00f5es \u00fateis"},{"location":"funs_cep/#sample.funs_cep.FaixaCep","text":"Bases: dict Consulta de faixas de CEP de acordo com a sua localidade. Parameters: Name Type Description Default dict dict Objeto contendo o dicion\u00e1rio com as faixas de CEP e sua localidade correspondente. O dict deve ser no formato: {range(start,end): \"localidade\"} required Source code in sample/funs_cep.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 class FaixaCep ( dict ): \"\"\"Consulta de faixas de CEP de acordo com a sua localidade. Args: dict (dict): Objeto contendo o dicion\u00e1rio com as faixas de CEP e sua localidade correspondente. O dict deve ser no formato: {range(start,end): \"localidade\"} \"\"\" def __getitem__ ( self , item : int ) -> str : \"\"\"Busca localidade a partir de uma consulta em faixas de valores. Args: item (int): CEP a ser consultado. Returns: str: Localidade correspondete ao CEP inserido. \"\"\" if not isinstance ( item , range ): for key in self : if item in key : return self [ key ] return None else : return super () . __getitem__ ( item )","title":"FaixaCep"},{"location":"funs_cep/#sample.funs_cep.FaixaCep.__getitem__","text":"Busca localidade a partir de uma consulta em faixas de valores. Parameters: Name Type Description Default item int CEP a ser consultado. required Returns: Name Type Description str str Localidade correspondete ao CEP inserido. Source code in sample/funs_cep.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 def __getitem__ ( self , item : int ) -> str : \"\"\"Busca localidade a partir de uma consulta em faixas de valores. Args: item (int): CEP a ser consultado. Returns: str: Localidade correspondete ao CEP inserido. \"\"\" if not isinstance ( item , range ): for key in self : if item in key : return self [ key ] return None else : return super () . __getitem__ ( item )","title":"__getitem__()"},{"location":"funs_cep/#sample.funs_cep.GeoCode","text":"Acessa a API do GoogleMaps para recuperar informa\u00e7\u00f5es de latitude e longitude. Source code in sample/funs_cep.py 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 class GeoCode : \"\"\"Acessa a API do GoogleMaps para recuperar informa\u00e7\u00f5es de latitude e longitude.\"\"\" def __init__ ( self , path = \"../config/key_google.txt\" ): \"\"\"Utiliza a client key no arquivo key_google.txt para estabelecer conex\u00e3o com a API. Args: path (str): Diret\u00f3rio e nome do arquivo que est\u00e1 a key para a API google. \"\"\" f = open ( path , \"r\" ) f = f . read () self . key = eval ( f ) self . gmaps_key = googlemaps . Client ( key = self . key ) def locate_geocode ( self , cep : str ) -> tuple : \"\"\"Consulta a latitude e longitude do CEP informado. Args: cep (str): CEP formatado, por exemplo: Distrito Federal - XXXXX-XXX. A fun\u00e7\u00e3o formatar_cep() formata o CEP da forma correta a ser utilizado. Returns: tuple: Latitude e Longitude a partir do CEP. \"\"\" print ( f \"Buscando geolocaliza\u00e7\u00e3o para { cep } \" ) g = self . gmaps_key . geocode ( cep ) try : self . lat = g [ 0 ][ \"geometry\" ][ \"location\" ][ \"lat\" ] self . lon = g [ 0 ][ \"geometry\" ][ \"location\" ][ \"lng\" ] return self . lat , self . lon except : return None","title":"GeoCode"},{"location":"funs_cep/#sample.funs_cep.GeoCode.__init__","text":"Utiliza a client key no arquivo key_google.txt para estabelecer conex\u00e3o com a API. Parameters: Name Type Description Default path str Diret\u00f3rio e nome do arquivo que est\u00e1 a key para a API google. '../config/key_google.txt' Source code in sample/funs_cep.py 93 94 95 96 97 98 99 100 101 102 def __init__ ( self , path = \"../config/key_google.txt\" ): \"\"\"Utiliza a client key no arquivo key_google.txt para estabelecer conex\u00e3o com a API. Args: path (str): Diret\u00f3rio e nome do arquivo que est\u00e1 a key para a API google. \"\"\" f = open ( path , \"r\" ) f = f . read () self . key = eval ( f ) self . gmaps_key = googlemaps . Client ( key = self . key )","title":"__init__()"},{"location":"funs_cep/#sample.funs_cep.GeoCode.locate_geocode","text":"Consulta a latitude e longitude do CEP informado. Parameters: Name Type Description Default cep str CEP formatado, por exemplo: Distrito Federal - XXXXX-XXX. A fun\u00e7\u00e3o formatar_cep() formata o CEP da forma correta a ser utilizado. required Returns: Name Type Description tuple tuple Latitude e Longitude a partir do CEP. Source code in sample/funs_cep.py 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 def locate_geocode ( self , cep : str ) -> tuple : \"\"\"Consulta a latitude e longitude do CEP informado. Args: cep (str): CEP formatado, por exemplo: Distrito Federal - XXXXX-XXX. A fun\u00e7\u00e3o formatar_cep() formata o CEP da forma correta a ser utilizado. Returns: tuple: Latitude e Longitude a partir do CEP. \"\"\" print ( f \"Buscando geolocaliza\u00e7\u00e3o para { cep } \" ) g = self . gmaps_key . geocode ( cep ) try : self . lat = g [ 0 ][ \"geometry\" ][ \"location\" ][ \"lat\" ] self . lon = g [ 0 ][ \"geometry\" ][ \"location\" ][ \"lng\" ] return self . lat , self . lon except : return None","title":"locate_geocode()"},{"location":"funs_cep/#sample.funs_cep.calcular_distancia","text":"C\u00e1lculo de dist\u00e2ncia entre dois pontos a partir das suas geolocaliza\u00e7\u00f5es. Parameters: Name Type Description Default origin tuple Latitude e longitude da localiza\u00e7\u00e3o de origem. required destination tuple Latitude e longitude da localiza\u00e7\u00e3o de destino. required metric str , opcional M\u00e9trica a ser utilizada para o c\u00e1lculo da dist\u00e2ncia. As m\u00e9tricas dispon\u00edveis s\u00e3o: hav - Haversine e gd - GeoDesic. Padr\u00e3o \"hav\". 'hav' Raises: Type Description KeyError M\u00e9trica de c\u00e1lculo errado. As op\u00e7\u00f5es v\u00e1lidas s\u00e3o: hav - Haversine ou gd - GeoDesic Returns: Name Type Description float float Dist\u00e2ncia em KM. Source code in sample/funs_cep.py 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 def calcular_distancia ( origin : tuple , destination : tuple , metric : metrics = \"hav\" ) -> float : \"\"\"C\u00e1lculo de dist\u00e2ncia entre dois pontos a partir das suas geolocaliza\u00e7\u00f5es. Args: origin (tuple): Latitude e longitude da localiza\u00e7\u00e3o de origem. destination (tuple): Latitude e longitude da localiza\u00e7\u00e3o de destino. metric (str, opcional): M\u00e9trica a ser utilizada para o c\u00e1lculo da dist\u00e2ncia. As m\u00e9tricas dispon\u00edveis s\u00e3o: hav - Haversine e gd - GeoDesic. Padr\u00e3o \"hav\". Raises: KeyError: M\u00e9trica de c\u00e1lculo errado. As op\u00e7\u00f5es v\u00e1lidas s\u00e3o: hav - Haversine ou gd - GeoDesic Returns: float: Dist\u00e2ncia em KM. \"\"\" if metric == \"hav\" : distance = haversine ( origin , destination ) elif metric == \"gd\" : distance = GD ( origin , destination ) . km else : raise KeyError ( \"Metric incorrect!\" ) return distance","title":"calcular_distancia()"},{"location":"funs_cep/#sample.funs_cep.formatar_cep","text":"Formata\u00e7\u00e3o do CEP com a localidade. Concatena a informa\u00e7\u00e3o da localidade (UF) e o CEP. Parameters: Name Type Description Default cep str or int CEP. required faixacep FaixaCep Objeto FaixaCep contendo as faixas de CEP e sua localidade correspondente. required Returns: Name Type Description str str CEP formatado, exemplo: Distrito Federal - XXXXXXXX. Source code in sample/funs_cep.py 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 def formatar_cep ( cep , faixacep : FaixaCep ) -> str : \"\"\"Formata\u00e7\u00e3o do CEP com a localidade. Concatena a informa\u00e7\u00e3o da localidade (UF) e o CEP. Args: cep (str or int): CEP. faixacep (FaixaCep): Objeto FaixaCep contendo as faixas de CEP e sua localidade correspondente. Returns: str: CEP formatado, exemplo: Distrito Federal - XXXXXXXX. \"\"\" estado = faixacep [ cep ] cep_formatado = f \" { estado } - { str ( cep ) } \" return cep_formatado","title":"formatar_cep()"},{"location":"funs_cep/#sample.funs_cep.limpar_cep","text":"Limpa strings de CEP. Retira caracteres que n\u00e3o sejam n\u00fameros. Retira CEPs com tamanhos incorretos, com 1 d\u00edgito em toda a string e retira aqueles que iniciam em uma faixa inexistente. As faixas consultadas est\u00e3o no arquivo faixas_cep.txt. As remo\u00e7\u00f5es existentes s\u00e3o aquelas que iniciam com: remove_tuple = (\"789\", \"76\", \"75\") Parameters: Name Type Description Default cep str CEP required Returns: Name Type Description int int CEP em formato de int para que possa ser consultado no dicion\u00e1rio de faixas de CEP. Consultar documenta\u00e7\u00e3o de FaixaCep(). Source code in sample/funs_cep.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 def limpar_cep ( cep : str ) -> int : \"\"\"Limpa strings de CEP. Retira caracteres que n\u00e3o sejam n\u00fameros. Retira CEPs com tamanhos incorretos, com 1 d\u00edgito em toda a string e retira aqueles que iniciam em uma faixa inexistente. As faixas consultadas est\u00e3o no arquivo faixas_cep.txt. As remo\u00e7\u00f5es existentes s\u00e3o aquelas que iniciam com: remove_tuple = (\"789\", \"76\", \"75\") Args: cep (str): CEP Returns: int: CEP em formato de int para que possa ser consultado no dicion\u00e1rio de faixas de CEP. Consultar documenta\u00e7\u00e3o de FaixaCep(). \"\"\" remove_tuple = ( \"789\" , \"76\" , \"75\" ) cep = re . sub ( \"[^0-9]\" , \"\" , cep ) if len ( cep ) < 7 or len ( cep ) > 8 : cep = None elif cep . count ( cep [ 0 ]) == len ( cep ): cep = None elif cep . startswith ( remove_tuple ): cep = None elif cep . startswith ( \"76\" ): cep = None if cep : return int ( cep ) return cep","title":"limpar_cep()"}]}